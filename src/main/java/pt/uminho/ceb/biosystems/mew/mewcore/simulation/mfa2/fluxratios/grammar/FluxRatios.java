/* Generated By:JavaCC: Do not edit this line. FluxRatios.java */
        package pt.uminho.ceb.biosystems.mew.mewcore.simulation.mfa2.fluxratios.grammar;

        import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import pt.uminho.ceb.biosystems.mew.utilities.datastructures.pair.Pair;

import pt.uminho.ceb.biosystems.mew.mewcore.simulation.mfa2.utils.LinkedMap;
  

        class FluxRatios implements FluxRatiosConstants {

                LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>> fluxesCoeffs;
                private double c;

                public FluxRatios(){
                }

                public Map<String, Double> run(String input) throws ParseException, TokenMgrError, NumberFormatException, FileNotFoundException {
                        FluxRatios parser = new FluxRatios(new FileInputStream(input)) ;

                        Pair<LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>>, Double> data = parser.Start(System.out);
                        LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>> fluxesCoeffs = data.getA();
                        double ratio = data.getB();

                        Map<String, Double> result = new HashMap<String, Double>();

                        for(String key:fluxesCoeffs.keySet())
                        {
                                double val = 0.0;
                                for(Pair<Double,Boolean> o: fluxesCoeffs.get(key))
                                {
                                        if(o.getB())
                                                val += o.getA()*ratio*-1;
                                        else
                                                val += o.getA();
                                }
                                result.put(key,val);
                        }
                        return result;
                }

                                       // #xxx -> xxx is not a token, it is just a local reg. exp.

// PARSER

/* Start -> Expression  EOF */
  final public Pair<LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>>, Double> Start(PrintStream printStream) throws ParseException, NumberFormatException {
        fluxesCoeffs = new LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>>();
    Equation();
    jj_consume_token(0);
                {if (true) return new Pair<LinkedMap<String, Pair<Double,Boolean>, LinkedList<Pair<Double,Boolean>>>, Double>(fluxesCoeffs,c);}
    throw new Error("Missing return statement in function");
  }

/* Equation -> Expression COMPARATOR NUMBER */
  final public void Equation() throws ParseException {
        Token t, comp;
    Expression();
    jj_consume_token(COMPARATOR);
    t = jj_consume_token(NUMBER);
                c = Double.parseDouble(t.image);
  }

/* Expression -> Term DIVIDE Term  */
  final public void Expression() throws ParseException, NumberFormatException {
    Term(false);
    jj_consume_token(DIVIDE);
    Term(true);
  }

/* Term -> Primary (PLUS Primary | MINUS)* */
  final public void Term(Boolean divisor) throws ParseException, NumberFormatException {
    Primary(divisor, false);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        Primary(divisor, false);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        Primary(divisor, true);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* 
	Primary ->  Element
		|	    MINUS Primary
*/
  final public void Primary(Boolean divisor, Boolean negative) throws ParseException, NumberFormatException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case FLUX_ID:
      Element(divisor, negative);
      break;
    case MINUS:
      jj_consume_token(MINUS);
                 negative = negative ? false : true;
      Primary(divisor, negative);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
	Element ->  FLUX_ID
		|	    NUMBER (FLUX_ID)?
*/
  final public void Element(Boolean divisor, Boolean negative) throws ParseException, NumberFormatException {
        Token t=null, t2;
        double coef;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLUX_ID:
      t = jj_consume_token(FLUX_ID);
                coef = negative ? -1 : 1;
                fluxesCoeffs.add(t.image,new Pair<Double,Boolean>(coef,divisor));
      break;
    case NUMBER:
      t2 = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLUX_ID:
        t = jj_consume_token(FLUX_ID);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
                if(t!=null)
                {
                        coef = Double.parseDouble(t2.image);
                        if(negative)
                                coef *= -1;
                        fluxesCoeffs.add(t.image,new Pair<Double,Boolean>(coef,divisor));
                }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public FluxRatiosTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x60,0xa40,0x800,0xa00,};
   }

  /** Constructor with InputStream. */
  public FluxRatios(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FluxRatios(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FluxRatiosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FluxRatios(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FluxRatiosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FluxRatios(FluxRatiosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FluxRatiosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
